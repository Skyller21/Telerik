C# vs.


	C++: There are some basic fundamentals when you compare the languages. However, C++ and C# are all derived from the C language. One basic difference is the object oriented language difference. Object oriented programming is entirely different from linear programming. Object oriented programming is based off of classes. Classes are compartments that represent your program parts. For instance, if you need to create a program that represents a house, you would have class for rooms, for appliances, for furniture, and for the people who inhabit the house. These are all basic components of your house, and they would be represented in your class structures. 

	Objective C: C# is useful if you want to do Microsoft.  Objective C is useful if you want to do Mac or iOS. One of the best parts of Objective-C is the dynamic nature — rather than calling methods, you send messages, which the runtime routes dynamically. Combined (judiciously) with dynamic typing, this can make a lot of powerful patterns simpler or even trivial to implement. Probably most important difference is memory management. With C# you get garbage collection, by virtue of it being a CLR based language. With Objective-C you need to manage memory yourself.

	Java: Java and C# are similar programming languages that are statically, strongly, and manifestly typed, both are class-based object-oriented, both are designed with semi-interpretation or runtime compilation in mind, both use garbage-collection, and both are "curly brace languages". C# libraries are usually well tested and reliable, and come with some guarantee of quality. Java, on the other hand, has a few tenacious bugs within its core libraries, and I haven't seen a single open-source platform without a known bug list. Take this into consideration when thinking about using third-party code.

	JavaScript: Client-side: Javascript runs in most browsers without a plugin. C# requires a browser plugin like Silverlight. Even though it's running on a client machine, Javascript can't read and write files there. C# in Silverlight may be able to read and write files depending on the Silverlight version and what the client allows. Both Javascript and C#/Silverlight can talk to remote servers.
Server-side: since you control this machine, you can do whatever you want - read files, write files, talk directly to databases, etc. Keep in mind there's nothing stopping you from running Javascript server-side.
JavaScript was originally intended to run inside of a browser, so it makes heavy use of DOM API's as well as other in-browser operations such as AJAX. C# probably does not have good support for such API's as it was never intended to be executed directly inside a browser - although Silverlight may provide such operations since it is (in a way) a "C# Sandbox" inside of a browser.
On the other hand, C# is a general-purpose language that was designed to build basically any application, from server-side engines to client applications to services

	PHP: PHP is free and among the most popular scripting languages online. There’s a huge open source developer community that regularly contributes to PHP development. 
C# is more general-purpose, it's used on a wide variety of platforms to do a wide variety of things, be it games, mobile apps, traditional GUI-based applications, web servers, etc. Syntax-wise, C# has a deep Java and C++ heritage; it's also only one of a family of diverse languages running on the .NET platform. It's also a well-designed language and a pleasure to work with in general. PHP is weaker in terms of reliability, debugging, consistency etc.
